{"ast":null,"code":"import { VExpandTransition } from '../transitions'; // Mixins\n\nimport Bootable from '../../mixins/bootable';\nimport Colorable from '../../mixins/colorable';\nimport { inject as RegistrableInject } from '../../mixins/registrable'; // Utilities\n\nimport { getSlot } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(Bootable, Colorable, RegistrableInject('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel'));\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-expansion-panel-content',\n  data: function data() {\n    return {\n      isActive: false\n    };\n  },\n  computed: {\n    parentIsActive: function parentIsActive() {\n      return this.expansionPanel.isActive;\n    }\n  },\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler: function handler(val, oldVal) {\n        var _this = this;\n\n        if (val) this.isBooted = true;\n        if (oldVal == null) this.isActive = val;else this.$nextTick(function () {\n          return _this.isActive = val;\n        });\n      }\n    }\n  },\n  created: function created() {\n    this.expansionPanel.registerContent(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.expansionPanel.unregisterContent();\n  },\n  render: function render(h) {\n    var _this2 = this;\n\n    return h(VExpandTransition, this.showLazyContent(function () {\n      return [h('div', _this2.setBackgroundColor(_this2.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: _this2.isActive\n        }]\n      }), [h('div', {\n        class: 'v-expansion-panel-content__wrap'\n      }, getSlot(_this2))])];\n    }));\n  }\n});","map":{"version":3,"mappings":"AAEA,SAASA,iBAAT,QAAkC,gBAAlC,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,MAAM,IAAIC,iBAAnB,QAA4C,0BAA5C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmC,mBAAnC;AAKA,IAAMC,UAAU,GAAGD,MAAM,CACvBL,QADuB,EAEvBC,SAFuB,EAGvBE,iBAAiB,CAAwC,gBAAxC,EAA0D,2BAA1D,EAAuF,mBAAvF,CAHM,CAAzB;AAUA;;AACA,eAAeG,UAAU,CAACC,MAAX,GAA6BA,MAA7B,CAAoC;AACjDC,MAAI,EAAE,2BAD2C;AAGjDC,MAAI,EAAE;AAAA,WAAO;AACXC,cAAQ,EAAE;AADC,KAAP;AAAA,GAH2C;AAOjDC,UAAQ,EAAE;AACRC,kBADQ,4BACM;AACZ,aAAO,KAAKC,cAAL,CAAoBH,QAA3B;AACD;AAHO,GAPuC;AAajDI,OAAK,EAAE;AACLF,kBAAc,EAAE;AACdG,eAAS,EAAE,IADG;AAEdC,aAFc,mBAELC,GAFK,EAEAC,MAFA,EAEM;AAAA;;AAClB,YAAID,GAAJ,EAAS,KAAKE,QAAL,GAAgB,IAAhB;AAET,YAAID,MAAM,IAAI,IAAd,EAAoB,KAAKR,QAAL,GAAgBO,GAAhB,CAApB,KACK,KAAKG,SAAL,CAAe;AAAA,iBAAM,MAAKV,QAAL,GAAgBO,GAAtB;AAAA,SAAf;AACN;AAPa;AADX,GAb0C;AAyBjDI,SAzBiD,qBAyB1C;AACL,SAAKR,cAAL,CAAoBS,eAApB,CAAoC,IAApC;AA1B+C;AA6BjDC,eA7BiD,2BA6BpC;AACX,SAAKV,cAAL,CAAoBW,iBAApB;AA9B+C;AAiCjDC,QAjCiD,kBAiCzCC,CAjCyC,EAiCxC;AAAA;;AACP,WAAOA,CAAC,CAAC3B,iBAAD,EAAoB,KAAK4B,eAAL,CAAqB;AAAA,aAAM,CACrDD,CAAC,CAAC,KAAD,EAAQ,OAAKE,kBAAL,CAAwB,OAAKC,KAA7B,EAAoC;AAC3CC,mBAAW,EAAE,2BAD8B;AAE3CC,kBAAU,EAAE,CAAC;AACXvB,cAAI,EAAE,MADK;AAEXwB,eAAK,EAAE,OAAKtB;AAFD,SAAD;AAF+B,OAApC,CAAR,EAMG,CACFgB,CAAC,CAAC,KAAD,EAAQ;AAAEO,aAAK,EAAE;AAAT,OAAR,EAAsD7B,OAAO,CAAC,MAAD,CAA7D,CADC,CANH,CADoD,CAAN;AAAA,KAArB,CAApB,CAAR;AAWD;AA7CgD,CAApC,CAAf","names":["VExpandTransition","Bootable","Colorable","inject","RegistrableInject","getSlot","mixins","baseMixins","extend","name","data","isActive","computed","parentIsActive","expansionPanel","watch","immediate","handler","val","oldVal","isBooted","$nextTick","created","registerContent","beforeDestroy","unregisterContent","render","h","showLazyContent","setBackgroundColor","color","staticClass","directives","value","class"],"sourceRoot":"","sources":["../../../src/components/VExpansionPanel/VExpansionPanelContent.ts"],"sourcesContent":["// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n"]},"metadata":{},"sourceType":"module"}