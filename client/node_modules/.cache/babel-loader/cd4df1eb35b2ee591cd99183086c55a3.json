{"ast":null,"code":"import _defineProperty from \"D:/vuejs-learning/MVEN-StackProject/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"D:/vuejs-learning/MVEN-StackProject/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/vuejs-learning/MVEN-StackProject/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\n// Components\nimport { VExpandTransition } from '../transitions';\nimport { VIcon } from '../VIcon'; // Mixins\n\nimport { inject as RegistrableInject } from '../../mixins/registrable';\nimport Colorable from '../../mixins/colorable'; // Utils\n\nimport mixins from '../../util/mixins';\nimport { getObjectValueByPath, createRange } from '../../util/helpers';\nvar baseMixins = mixins(Colorable, RegistrableInject('treeview'));\nexport var VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  color: {\n    type: String,\n    default: 'primary'\n  },\n  disablePerNode: Boolean,\n  expandIcon: {\n    type: String,\n    default: '$subgroup'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  loadChildren: Function,\n  loadingIcon: {\n    type: String,\n    default: '$loading'\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff'\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn'\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String,\n    default: 'leaf',\n    validator: function validator(v) {\n      return ['leaf', 'independent'].includes(v);\n    }\n  }\n};\n/* @vue/component */\n\nvar VTreeviewNode = baseMixins.extend().extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n  props: _objectSpread({\n    level: Number,\n    item: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    },\n    parentIsDisabled: Boolean\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      hasLoaded: false,\n      isActive: false,\n      isIndeterminate: false,\n      isLoading: false,\n      isOpen: false,\n      isSelected: false\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return getObjectValueByPath(this.item, this.itemDisabled) || !this.disablePerNode && this.parentIsDisabled && this.selectionType === 'leaf';\n    },\n    key: function key() {\n      return getObjectValueByPath(this.item, this.itemKey);\n    },\n    children: function children() {\n      var _this = this;\n\n      var children = getObjectValueByPath(this.item, this.itemChildren);\n      return children && children.filter(function (child) {\n        return !_this.treeview.isExcluded(getObjectValueByPath(child, _this.itemKey));\n      });\n    },\n    text: function text() {\n      return getObjectValueByPath(this.item, this.itemText);\n    },\n    scopedProps: function scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n    computedIcon: function computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n    hasChildren: function hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n  },\n  created: function created() {\n    this.treeview.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n  methods: {\n    checkChildren: function checkChildren() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!_this2.children || _this2.children.length || !_this2.loadChildren || _this2.hasLoaded) return resolve();\n        _this2.isLoading = true;\n        resolve(_this2.loadChildren(_this2.item));\n      }).then(function () {\n        _this2.isLoading = false;\n        _this2.hasLoaded = true;\n      });\n    },\n    open: function open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n    genLabel: function genLabel() {\n      var children = [];\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, children);\n    },\n    genPrependSlot: function genPrependSlot() {\n      if (!this.$scopedSlots.prepend) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend'\n      }, this.$scopedSlots.prepend(this.scopedProps));\n    },\n    genAppendSlot: function genAppendSlot() {\n      if (!this.$scopedSlots.append) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append'\n      }, this.$scopedSlots.append(this.scopedProps));\n    },\n    genContent: function genContent() {\n      var children = [this.genPrependSlot(), this.genLabel(), this.genAppendSlot()];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n    genToggle: function genToggle() {\n      var _this3 = this;\n\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this3.isLoading) return;\n\n            _this3.checkChildren().then(function () {\n              return _this3.open();\n            });\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n    genCheckbox: function genCheckbox() {\n      var _this4 = this;\n\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this4.isLoading) return;\n\n            _this4.checkChildren().then(function () {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              _this4.$nextTick(function () {\n                _this4.isSelected = !_this4.isSelected;\n                _this4.isIndeterminate = false;\n\n                _this4.treeview.updateSelected(_this4.key, _this4.isSelected);\n\n                _this4.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n    genLevel: function genLevel(level) {\n      var _this5 = this;\n\n      return createRange(level).map(function () {\n        return _this5.$createElement('div', {\n          staticClass: 'v-treeview-node__level'\n        });\n      });\n    },\n    genNode: function genNode() {\n      var _this6 = this;\n\n      var children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle());\n      } else {\n        children.unshift.apply(children, _toConsumableArray(this.genLevel(1)));\n      }\n\n      children.unshift.apply(children, _toConsumableArray(this.genLevel(this.level)));\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: _defineProperty({}, this.activeClass, this.isActive),\n        on: {\n          click: function click() {\n            if (_this6.openOnClick && _this6.hasChildren) {\n              _this6.checkChildren().then(_this6.open);\n            } else if (_this6.activatable && !_this6.disabled) {\n              _this6.isActive = !_this6.isActive;\n\n              _this6.treeview.updateActive(_this6.key, _this6.isActive);\n\n              _this6.treeview.emitActive();\n            }\n          }\n        }\n      }), children);\n    },\n    genChild: function genChild(item, parentIsDisabled) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item: item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          disablePerNode: this.disablePerNode,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled: parentIsDisabled\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n    genChildrenWrapper: function genChildrenWrapper() {\n      var _this7 = this;\n\n      if (!this.isOpen || !this.children) return null;\n      var children = [this.children.map(function (c) {\n        return _this7.genChild(c, _this7.disabled);\n      })];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n    genTransition: function genTransition() {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);\n    }\n  },\n  render: function render(h) {\n    var children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen)\n      }\n    }, children);\n  }\n});\nexport default VTreeviewNode;","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA,SAASA,iBAAT,QAAkC,gBAAlC;AACA,SAASC,KAAT,QAAsB,UAAtB,C,CAGA;;AACA,SAASC,MAAM,IAAIC,iBAAnB,QAA4C,0BAA5C;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAEA;;AACA,OAAOC,MAAP,MAAmC,mBAAnC;AACA,SAASC,oBAAT,EAA+BC,WAA/B,QAAkD,oBAAlD;AAQA,IAAMC,UAAU,GAAGH,MAAM,CACvBD,SADuB,EAEvBD,iBAAiB,CAAC,UAAD,CAFM,CAAzB;AASA,OAAO,IAAMM,kBAAkB,GAAG;AAChCC,aAAW,EAAEC,OADmB;AAEhCC,aAAW,EAAE;AACXC,QAAI,EAAEC,MADK;AAEXC,WAAO,EAAE;AAFE,GAFmB;AAMhCC,OAAK,EAAE;AACLH,QAAI,EAAEC,MADD;AAELC,WAAO,EAAE;AAFJ,GANyB;AAUhCE,gBAAc,EAAEN,OAVgB;AAWhCO,YAAU,EAAE;AACVL,QAAI,EAAEC,MADI;AAEVC,WAAO,EAAE;AAFC,GAXoB;AAehCI,mBAAiB,EAAE;AACjBN,QAAI,EAAEC,MADW;AAEjBC,WAAO,EAAE;AAFQ,GAfa;AAmBhCK,cAAY,EAAE;AACZP,QAAI,EAAEC,MADM;AAEZC,WAAO,EAAE;AAFG,GAnBkB;AAuBhCM,cAAY,EAAE;AACZR,QAAI,EAAEC,MADM;AAEZC,WAAO,EAAE;AAFG,GAvBkB;AA2BhCO,SAAO,EAAE;AACPT,QAAI,EAAEC,MADC;AAEPC,WAAO,EAAE;AAFF,GA3BuB;AA+BhCQ,UAAQ,EAAE;AACRV,QAAI,EAAEC,MADE;AAERC,WAAO,EAAE;AAFD,GA/BsB;AAmChCS,cAAY,EAAEC,QAnCkB;AAoChCC,aAAW,EAAE;AACXb,QAAI,EAAEC,MADK;AAEXC,WAAO,EAAE;AAFE,GApCmB;AAwChCY,SAAO,EAAE;AACPd,QAAI,EAAEC,MADC;AAEPC,WAAO,EAAE;AAFF,GAxCuB;AA4ChCa,QAAM,EAAE;AACNf,QAAI,EAAEC,MADA;AAENC,WAAO,EAAE;AAFH,GA5CwB;AAgDhCc,aAAW,EAAElB,OAhDmB;AAiDhCmB,SAAO,EAAEnB,OAjDuB;AAkDhCoB,YAAU,EAAEpB,OAlDoB;AAmDhCqB,eAAa,EAAE;AACbnB,QAAI,EAAEC,MADO;AAEbC,WAAO,EAAE;AAFI,GAnDiB;AAuDhCkB,QAAM,EAAEtB,OAvDwB;AAwDhCuB,YAAU,EAAEvB,OAxDoB;AAyDhCwB,eAAa,EAAE;AACbtB,QAAI,EAAEC,MADO;AAEbC,WAAO,EAAE,MAFI;AAGbqB,aAAS,EAAG,oBAAD;AAAA,aAAe,CAAC,MAAD,EAAS,aAAT,EAAwBC,QAAxB,CAAiCC,CAAjC,CAAf;AAAA;AAHE;AAzDiB,CAA3B;AAgEP;;AACA,IAAMC,aAAa,GAAG/B,UAAU,CAACgC,MAAX,GAA6BA,MAA7B,CAAoC;AACxDC,MAAI,EAAE,iBADkD;AAGxDvC,QAAM,EAAE;AACNwC,YAAQ,EAAE;AACR3B,aAAO,EAAE;AADD;AADJ,GAHgD;AASxD4B,OAAK;AACHC,SAAK,EAAEC,MADJ;AAEHC,QAAI,EAAE;AACJjC,UAAI,EAAEkC,MADF;AAEJhC,aAAO,EAAE;AAAA,eAAM,IAAN;AAAA;AAFL,KAFH;AAMHiC,oBAAgB,EAAErC;AANf,KAOAF,kBAPA,CATmD;AAmBxDwC,MAAI,EAAE;AAAA,WAAO;AACXC,eAAS,EAAE,KADA;AAEXC,cAAQ,EAAE,KAFC;AAGXC,qBAAe,EAAE,KAHN;AAIXC,eAAS,EAAE,KAJA;AAKXC,YAAM,EAAE,KALG;AAMXC,gBAAU,EAAE;AAND,KAAP;AAAA,GAnBkD;AA4BxDC,UAAQ,EAAE;AACRC,YADQ,sBACA;AACN,aACEnD,oBAAoB,CAAC,KAAKwC,IAAN,EAAY,KAAKzB,YAAjB,CAApB,IACC,CAAC,KAAKJ,cAAN,IAAyB,KAAK+B,gBAA9B,IAAkD,KAAKb,aAAL,KAAuB,MAF5E;AAFM;AAORuB,OAPQ,iBAOL;AACD,aAAOpD,oBAAoB,CAAC,KAAKwC,IAAN,EAAY,KAAKxB,OAAjB,CAA3B;AARM;AAURqC,YAVQ,sBAUA;AAAA;;AACN,UAAMA,QAAQ,GAAGrD,oBAAoB,CAAC,KAAKwC,IAAN,EAAY,KAAK1B,YAAjB,CAArC;AACA,aAAOuC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,CAAiB,eAAD;AAAA,eAAgB,CAAC,MAAKlB,QAAL,CAAcmB,UAAd,CAAyBvD,oBAAoB,CAACwD,KAAD,EAAQ,MAAKxC,OAAb,CAA7C,CAAjB;AAAA,OAAhB,CAAnB;AAZM;AAcRyC,QAdQ,kBAcJ;AACF,aAAOzD,oBAAoB,CAAC,KAAKwC,IAAN,EAAY,KAAKvB,QAAjB,CAA3B;AAfM;AAiBRyC,eAjBQ,yBAiBG;AACT,aAAO;AACLlB,YAAI,EAAE,KAAKA,IADN;AAELmB,YAAI,EAAE,CAAC,KAAKN,QAFP;AAGLO,gBAAQ,EAAE,KAAKX,UAHV;AAILY,qBAAa,EAAE,KAAKf,eAJf;AAKLgB,cAAM,EAAE,KAAKjB,QALR;AAMLkB,YAAI,EAAE,KAAKf;AANN,OAAP;AAlBM;AA2BRgB,gBA3BQ,0BA2BI;AACV,UAAI,KAAKlB,eAAT,EAA0B,OAAO,KAAKjC,iBAAZ,CAA1B,KACK,IAAI,KAAKoC,UAAT,EAAqB,OAAO,KAAK3B,MAAZ,CAArB,KACA,OAAO,KAAKD,OAAZ;AA9BC;AAgCR4C,eAhCQ,yBAgCG;AACT,aAAO,CAAC,CAAC,KAAKZ,QAAP,KAAoB,CAAC,CAAC,KAAKA,QAAL,CAAca,MAAhB,IAA0B,CAAC,CAAC,KAAKhD,YAArD,CAAP;AACD;AAlCO,GA5B8C;AAiExDiD,SAjEwD,qBAiEjD;AACL,SAAK/B,QAAL,CAAcgC,QAAd,CAAuB,IAAvB;AAlEsD;AAqExDC,eArEwD,2BAqE3C;AACX,SAAKjC,QAAL,CAAckC,UAAd,CAAyB,IAAzB;AAtEsD;AAyExDC,SAAO,EAAE;AACPC,iBADO,2BACM;AAAA;;AACX,aAAO,IAAIC,OAAJ,CAAkB,iBAAO,EAAG;AACjC;AACA;AACA,YAAI,CAAC,OAAKpB,QAAN,IAAkB,OAAKA,QAAL,CAAca,MAAhC,IAA0C,CAAC,OAAKhD,YAAhD,IAAgE,OAAK0B,SAAzE,EAAoF,OAAO8B,OAAO,EAAd;AAEpF,eAAK3B,SAAL,GAAiB,IAAjB;AACA2B,eAAO,CAAC,OAAKxD,YAAL,CAAkB,OAAKsB,IAAvB,CAAD,CAAP;AANK,SAOJmC,IAPI,CAOC,YAAK;AACX,eAAK5B,SAAL,GAAiB,KAAjB;AACA,eAAKH,SAAL,GAAiB,IAAjB;AATK,QAAP;AAFK;AAcPmB,QAdO,kBAcH;AACF,WAAKf,MAAL,GAAc,CAAC,KAAKA,MAApB;AACA,WAAKZ,QAAL,CAAcwC,UAAd,CAAyB,KAAKxB,GAA9B,EAAmC,KAAKJ,MAAxC;AACA,WAAKZ,QAAL,CAAcyC,QAAd;AAjBK;AAmBPC,YAnBO,sBAmBC;AACN,UAAMzB,QAAQ,GAAG,EAAjB;AAEA,UAAI,KAAK0B,YAAL,CAAkBC,KAAtB,EAA6B3B,QAAQ,CAAC4B,IAAT,CAAc,KAAKF,YAAL,CAAkBC,KAAlB,CAAwB,KAAKtB,WAA7B,CAAd,EAA7B,KACKL,QAAQ,CAAC4B,IAAT,CAAc,KAAKxB,IAAnB;AAEL,aAAO,KAAKyB,cAAL,CAAoB,KAApB,EAA2B;AAChCC,YAAI,EAAE,OAD0B;AAEhCC,mBAAW,EAAE;AAFmB,OAA3B,EAGJ/B,QAHI,CAAP;AAzBK;AA8BPgC,kBA9BO,4BA8BO;AACZ,UAAI,CAAC,KAAKN,YAAL,CAAkBO,OAAvB,EAAgC,OAAO,IAAP;AAEhC,aAAO,KAAKJ,cAAL,CAAoB,KAApB,EAA2B;AAChCE,mBAAW,EAAE;AADmB,OAA3B,EAEJ,KAAKL,YAAL,CAAkBO,OAAlB,CAA0B,KAAK5B,WAA/B,CAFI,CAAP;AAjCK;AAqCP6B,iBArCO,2BAqCM;AACX,UAAI,CAAC,KAAKR,YAAL,CAAkBS,MAAvB,EAA+B,OAAO,IAAP;AAE/B,aAAO,KAAKN,cAAL,CAAoB,KAApB,EAA2B;AAChCE,mBAAW,EAAE;AADmB,OAA3B,EAEJ,KAAKL,YAAL,CAAkBS,MAAlB,CAAyB,KAAK9B,WAA9B,CAFI,CAAP;AAxCK;AA4CP+B,cA5CO,wBA4CG;AACR,UAAMpC,QAAQ,GAAG,CACf,KAAKgC,cAAL,EADe,EAEf,KAAKP,QAAL,EAFe,EAGf,KAAKS,aAAL,EAHe,CAAjB;AAMA,aAAO,KAAKL,cAAL,CAAoB,KAApB,EAA2B;AAChCE,mBAAW,EAAE;AADmB,OAA3B,EAEJ/B,QAFI,CAAP;AAnDK;AAuDPqC,aAvDO,uBAuDE;AAAA;;AACP,aAAO,KAAKR,cAAL,CAAoBvF,KAApB,EAA2B;AAChCyF,mBAAW,EAAE,yBADmB;AAEhCO,aAAK,EAAE;AACL,2CAAiC,KAAK3C,MADjC;AAEL,8CAAoC,KAAKD;AAFpC,SAFyB;AAMhCoC,YAAI,EAAE,SAN0B;AAOhCS,UAAE,EAAE;AACFC,eAAK,EAAG,gBAAD,EAAkB;AACvBC,aAAC,CAACC,eAAF;AAEA,gBAAI,OAAKhD,SAAT,EAAoB;;AAEpB,mBAAKyB,aAAL,GAAqBG,IAArB,CAA0B;AAAA,qBAAM,OAAKZ,IAAL,EAAN;AAAA,aAA1B;AACD;AAPC;AAP4B,OAA3B,EAgBJ,CAAC,KAAKhB,SAAL,GAAiB,KAAK3B,WAAtB,GAAoC,KAAKR,UAA1C,CAhBI,CAAP;AAxDK;AA0EPoF,eA1EO,yBA0EI;AAAA;;AACT,aAAO,KAAKd,cAAL,CAAoBvF,KAApB,EAA2B;AAChCyF,mBAAW,EAAE,2BADmB;AAEhC/C,aAAK,EAAE;AACL3B,eAAK,EAAE,KAAKuC,UAAL,IAAmB,KAAKH,eAAxB,GAA0C,KAAKpB,aAA/C,GAA+DuE,SADjE;AAEL9C,kBAAQ,EAAE,KAAKA;AAFV,SAFyB;AAMhCyC,UAAE,EAAE;AACFC,eAAK,EAAG,gBAAD,EAAkB;AACvBC,aAAC,CAACC,eAAF;AAEA,gBAAI,OAAKhD,SAAT,EAAoB;;AAEpB,mBAAKyB,aAAL,GAAqBG,IAArB,CAA0B,YAAK;AAC7B;AACA,qBAAKuB,SAAL,CAAe,YAAK;AAClB,uBAAKjD,UAAL,GAAkB,CAAC,OAAKA,UAAxB;AACA,uBAAKH,eAAL,GAAuB,KAAvB;;AAEA,uBAAKV,QAAL,CAAc+D,cAAd,CAA6B,OAAK/C,GAAlC,EAAuC,OAAKH,UAA5C;;AACA,uBAAKb,QAAL,CAAcgE,YAAd;AALF;AAFF;AAUD;AAhBC;AAN4B,OAA3B,EAwBJ,CAAC,KAAKpC,YAAN,CAxBI,CAAP;AA3EK;AAqGPqC,YArGO,oBAqGG/D,KArGH,EAqGgB;AAAA;;AACrB,aAAOrC,WAAW,CAACqC,KAAD,CAAX,CAAmBgE,GAAnB,CAAuB;AAAA,eAAM,OAAKpB,cAAL,CAAoB,KAApB,EAA2B;AAC7DE,qBAAW,EAAE;AADgD,SAA3B,CAAN;AAAA,OAAvB,CAAP;AAtGK;AA0GPmB,WA1GO,qBA0GA;AAAA;;AACL,UAAMlD,QAAQ,GAAG,CAAC,KAAKoC,UAAL,EAAD,CAAjB;AAEA,UAAI,KAAKhE,UAAT,EAAqB4B,QAAQ,CAACmD,OAAT,CAAiB,KAAKR,WAAL,EAAjB;;AAErB,UAAI,KAAK/B,WAAT,EAAsB;AACpBZ,gBAAQ,CAACmD,OAAT,CAAiB,KAAKd,SAAL,EAAjB;AADF,aAEO;AACLrC,gBAAQ,CAACmD,OAAT,eAAQ,qBAAY,KAAKH,QAAL,CAAc,CAAd,CAAZ,EAAR;AACD;;AAEDhD,cAAQ,CAACmD,OAAT,eAAQ,qBAAY,KAAKH,QAAL,CAAc,KAAK/D,KAAnB,CAAZ,EAAR;AAEA,aAAO,KAAK4C,cAAL,CAAoB,KAApB,EAA2B,KAAKuB,YAAL,CAAkB,KAAK5D,QAAL,IAAiB,KAAKnC,KAAxC,EAA+C;AAC/E0E,mBAAW,EAAE,uBADkE;AAE/EO,aAAK,sBACF,KAAKrF,WADH,EACiB,KAAKuC,QADtB,CAF0E;AAK/E+C,UAAE,EAAE;AACFC,eAAK,EAAE,iBAAK;AACV,gBAAI,OAAKtE,WAAL,IAAoB,OAAK0C,WAA7B,EAA0C;AACxC,qBAAKO,aAAL,GAAqBG,IAArB,CAA0B,OAAKZ,IAA/B;AADF,mBAEO,IAAI,OAAK3D,WAAL,IAAoB,CAAC,OAAK+C,QAA9B,EAAwC;AAC7C,qBAAKN,QAAL,GAAgB,CAAC,OAAKA,QAAtB;;AACA,qBAAKT,QAAL,CAAcsE,YAAd,CAA2B,OAAKtD,GAAhC,EAAqC,OAAKP,QAA1C;;AACA,qBAAKT,QAAL,CAAcuE,UAAd;AACD;AACF;AATC;AAL2E,OAA/C,CAA3B,EAgBHtD,QAhBG,CAAP;AAvHK;AAyIPuD,YAzIO,oBAyIGpE,IAzIH,EAyIcE,gBAzId,EAyIuC;AAC5C,aAAO,KAAKwC,cAAL,CAAoBjD,aAApB,EAAmC;AACxCmB,WAAG,EAAEpD,oBAAoB,CAACwC,IAAD,EAAO,KAAKxB,OAAZ,CADe;AAExCqB,aAAK,EAAE;AACLjC,qBAAW,EAAE,KAAKA,WADb;AAELE,qBAAW,EAAE,KAAKA,WAFb;AAGLkC,cAHK,EAGLA,IAHK;AAILf,oBAAU,EAAE,KAAKA,UAJZ;AAKLC,uBAAa,EAAE,KAAKA,aALf;AAMLhB,eAAK,EAAE,KAAKA,KANP;AAOLC,wBAAc,EAAE,KAAKA,cAPhB;AAQLC,oBAAU,EAAE,KAAKA,UARZ;AASLC,2BAAiB,EAAE,KAAKA,iBATnB;AAULQ,iBAAO,EAAE,KAAKA,OAVT;AAWLC,gBAAM,EAAE,KAAKA,MAXR;AAYLF,qBAAW,EAAE,KAAKA,WAZb;AAaLJ,iBAAO,EAAE,KAAKA,OAbT;AAcLC,kBAAQ,EAAE,KAAKA,QAdV;AAeLF,sBAAY,EAAE,KAAKA,YAfd;AAgBLD,sBAAY,EAAE,KAAKA,YAhBd;AAiBLI,sBAAY,EAAE,KAAKA,YAjBd;AAkBLU,oBAAU,EAAE,KAAKA,UAlBZ;AAmBLL,qBAAW,EAAE,KAAKA,WAnBb;AAoBLC,iBAAO,EAAE,KAAKA,OApBT;AAqBLG,gBAAM,EAAE,KAAKA,MArBR;AAsBLW,eAAK,EAAE,KAAKA,KAAL,GAAa,CAtBf;AAuBLT,uBAAa,EAAE,KAAKA,aAvBf;AAwBLa;AAxBK,SAFiC;AA4BxCmE,mBAAW,EAAE,KAAK9B;AA5BsB,OAAnC,CAAP;AA1IK;AAyKP+B,sBAzKO,gCAyKW;AAAA;;AAChB,UAAI,CAAC,KAAK9D,MAAN,IAAgB,CAAC,KAAKK,QAA1B,EAAoC,OAAO,IAAP;AAEpC,UAAMA,QAAQ,GAAG,CAAC,KAAKA,QAAL,CAAciD,GAAd,CAAkB,WAAC;AAAA,eAAI,OAAKM,QAAL,CAAcG,CAAd,EAAiB,OAAK5D,QAAtB,CAAJ;AAAA,OAAnB,CAAD,CAAjB;AAEA,aAAO,KAAK+B,cAAL,CAAoB,KAApB,EAA2B;AAChCE,mBAAW,EAAE;AADmB,OAA3B,EAEJ/B,QAFI,CAAP;AA9KK;AAkLP2D,iBAlLO,2BAkLM;AACX,aAAO,KAAK9B,cAAL,CAAoBxF,iBAApB,EAAuC,CAAC,KAAKoH,kBAAL,EAAD,CAAvC,CAAP;AACD;AApLM,GAzE+C;AAgQxDG,QAhQwD,kBAgQhDC,CAhQgD,EAgQ/C;AACP,QAAM7D,QAAQ,GAAkB,CAAC,KAAKkD,OAAL,EAAD,CAAhC;AAEA,QAAI,KAAK3E,UAAT,EAAqByB,QAAQ,CAAC4B,IAAT,CAAc,KAAK+B,aAAL,EAAd,EAArB,KACK3D,QAAQ,CAAC4B,IAAT,CAAc,KAAK6B,kBAAL,EAAd;AAEL,WAAOI,CAAC,CAAC,KAAD,EAAQ;AACd9B,iBAAW,EAAE,iBADC;AAEdO,WAAK,EAAE;AACL,iCAAyB,CAAC,KAAK1B,WAD1B;AAEL,kCAA0B,KAAK1C,WAF1B;AAGL,qCAA6B,KAAK4B,QAH7B;AAIL,oCAA4B,KAAK3B,OAJ5B;AAKL,mCAA2B,KAAKG,MAL3B;AAML,qCAA6B,KAAKsB;AAN7B,OAFO;AAUdkE,WAAK,EAAE;AACL,yBAAiB3G,MAAM,CAAC,KAAKwC,MAAN;AADlB;AAVO,KAAR,EAaLK,QAbK,CAAR;AAcD;AApRuD,CAApC,CAAtB;AAuRA,eAAepB,aAAf","names":["VExpandTransition","VIcon","inject","RegistrableInject","Colorable","mixins","getObjectValueByPath","createRange","baseMixins","VTreeviewNodeProps","activatable","Boolean","activeClass","type","String","default","color","disablePerNode","expandIcon","indeterminateIcon","itemChildren","itemDisabled","itemKey","itemText","loadChildren","Function","loadingIcon","offIcon","onIcon","openOnClick","rounded","selectable","selectedColor","shaped","transition","selectionType","validator","includes","v","VTreeviewNode","extend","name","treeview","props","level","Number","item","Object","parentIsDisabled","data","hasLoaded","isActive","isIndeterminate","isLoading","isOpen","isSelected","computed","disabled","key","children","filter","isExcluded","child","text","scopedProps","leaf","selected","indeterminate","active","open","computedIcon","hasChildren","length","created","register","beforeDestroy","unregister","methods","checkChildren","Promise","resolve","then","updateOpen","emitOpen","genLabel","$scopedSlots","label","push","$createElement","slot","staticClass","genPrependSlot","prepend","genAppendSlot","append","genContent","genToggle","class","on","click","e","stopPropagation","genCheckbox","undefined","$nextTick","updateSelected","emitSelected","genLevel","map","genNode","unshift","setTextColor","updateActive","emitActive","genChild","scopedSlots","genChildrenWrapper","c","genTransition","render","h","attrs"],"sourceRoot":"","sources":["../../../src/components/VTreeview/VTreeviewNode.ts"],"sourcesContent":["// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath, createRange } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  disablePerNode: Boolean,\n  expandIcon: {\n    type: String,\n    default: '$subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropType<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String as PropType<'leaf' | 'independent'>,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n}\n\n/* @vue/component */\nconst VTreeviewNode = baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    level: Number,\n    item: {\n      type: Object,\n      default: () => null,\n    } as PropValidator<Record<string, unknown> | null>,\n    parentIsDisabled: Boolean,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): boolean {\n      return (\n        getObjectValueByPath(this.item, this.itemDisabled) ||\n        (!this.disablePerNode && (this.parentIsDisabled && this.selectionType === 'leaf'))\n      )\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      const children = getObjectValueByPath(this.item, this.itemChildren)\n      return children && children.filter((child: any) => !this.treeview.isExcluded(getObjectValueByPath(child, this.itemKey)))\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genPrependSlot () {\n      if (!this.$scopedSlots.prepend) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend',\n      }, this.$scopedSlots.prepend(this.scopedProps))\n    },\n    genAppendSlot () {\n      if (!this.$scopedSlots.append) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append',\n      }, this.$scopedSlots.append(this.scopedProps))\n    },\n    genContent () {\n      const children = [\n        this.genPrependSlot(),\n        this.genLabel(),\n        this.genAppendSlot(),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genLevel (level: number) {\n      return createRange(level).map(() => this.$createElement('div', {\n        staticClass: 'v-treeview-node__level',\n      }))\n    },\n    genNode () {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle())\n      } else {\n        children.unshift(...this.genLevel(1))\n      }\n\n      children.unshift(...this.genLevel(this.level))\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.openOnClick && this.hasChildren) {\n              this.checkChildren().then(this.open)\n            } else if (this.activatable && !this.disabled) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any, parentIsDisabled: boolean) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          disablePerNode: this.disablePerNode,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper () {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(c => this.genChild(c, this.disabled))]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildren = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n\nexport default VTreeviewNode\n"]},"metadata":{},"sourceType":"module"}