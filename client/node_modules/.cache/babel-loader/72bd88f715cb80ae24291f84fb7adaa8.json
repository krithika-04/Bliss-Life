{"ast":null,"code":"import _asyncToGenerator from \"D:/vuejs-learning/MVEN-StackProject/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"D:/vuejs-learning/MVEN-StackProject/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, email } from 'vee-validate/dist/rules';\nimport { extend, ValidationProvider, setInteractionMode, ValidationObserver } from 'vee-validate';\nsetInteractionMode('eager');\nextend('required', _objectSpread(_objectSpread({}, required), {}, {\n  message: '{_field_} can not be empty'\n}));\nextend('email', _objectSpread(_objectSpread({}, email), {}, {\n  message: 'Email must be valid'\n}));\nexport default {\n  components: {\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver\n  },\n  data: function data() {\n    return {\n      email: '',\n      password: null,\n      showPass: false\n    };\n  },\n  computed: {\n    params: function params() {\n      return {\n        email: this.email,\n        password: this.password\n      };\n    }\n  },\n  methods: {\n    submit: function submit() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var valid;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$refs.observer.validate();\n\n              case 2:\n                valid = _context.sent;\n\n                if (valid) {\n                  _this.login(_this.params); // action to login\n\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    clear: function clear() {\n      // you can use this method to clear login form\n      this.email = '';\n      this.password = null;\n      this.$refs.observer.reset();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AACAA;AAEAC,mDACAC,QADA;AAEAC;AAFA;AAKAF,gDACAG,KADA;AAEAD;AAFA;AAIA;AACAE;AACAC,0CADA;AAEAC;AAFA,GADA;AAKAC;AAAA;AACAJ,eADA;AAEAK,oBAFA;AAGAC;AAHA;AAAA,GALA;AAUAC;AACAC,UADA,oBACA;AACA;AACAR,yBADA;AAEAK;AAFA;AAIA;AANA,GAVA;AAkBAI;AACAC,UADA,oBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,+BADA;;AAAA;AACAC,qBADA;;AAEA;AACA,4CADA,CACA;;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,KANA;AAOAC,SAPA,mBAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AAlBA","names":["setInteractionMode","extend","required","message","email","components","ValidationProvider","ValidationObserver","data","password","showPass","computed","params","methods","submit","valid","clear"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["\r\n//Login.vue\r\n\r\n<template>\r\n  <section class=\"section-container\">\r\n    <v-row class=\"signin\">\r\n      <v-col cols=\"8\" class=\"left\">\r\n        <h1>Welcome to my site</h1>\r\n      </v-col>\r\n      <v-col cols=\"4\" class=\"right\">\r\n        <h2>LOGIN</h2>\r\n        <validation-observer ref=\"observer\">\r\n          <v-form @submit.prevent=\"submit\">\r\n            <validation-provider v-slot=\"{ errors }\" name=\"Name\" rules=\"required|email\">\r\n              <v-text-field\r\n                v-model=\"email\"\r\n                :error-messages=\"errors\"\r\n                label=\"Email\"\r\n                required\r\n                outlined\r\n                dark\r\n                filled\r\n                dense\r\n              ></v-text-field>\r\n            </validation-provider>\r\n            <validation-provider v-slot=\"{ errors }\" name=\"email\" rules=\"required\">\r\n              <v-text-field\r\n                v-model=\"password\"\r\n                :error-messages=\"errors\"\r\n                label=\"Password\"\r\n                :append-icon=\"showPass ? 'mdi-eye' : 'mdi-eye-off'\"\r\n                @click:append=\"showPass = !showPass\"\r\n                required\r\n                outlined\r\n                dense\r\n                dark\r\n                filled\r\n                :type=\"showPass ? 'text' : 'password'\"\r\n              ></v-text-field>\r\n            </validation-provider>\r\n            <div class=\"text-center\">\r\n              <v-btn class=\"signin-btn\" type=\"submit\" rounded color=\"white\" dark>\r\n                Sign In\r\n              </v-btn>\r\n            </div>\r\n          </v-form>\r\n        </validation-observer>\r\n      </v-col>\r\n    </v-row>\r\n  </section>\r\n</template>\r\n<script>\r\nimport { required, email } from 'vee-validate/dist/rules'\r\nimport { extend, ValidationProvider, setInteractionMode, ValidationObserver } from 'vee-validate'\r\nsetInteractionMode('eager')\r\n\r\nextend('required', {\r\n  ...required,\r\n  message: '{_field_} can not be empty'\r\n})\r\n\r\nextend('email', {\r\n  ...email,\r\n  message: 'Email must be valid'\r\n})\r\nexport default {\r\n    components: {\r\n    ValidationProvider,\r\n    ValidationObserver\r\n  },\r\n  data: () => ({\r\n    email: '',\r\n    password: null,\r\n    showPass: false\r\n  }),\r\n  computed: {\r\n    params() {\r\n      return {\r\n        email: this.email,\r\n        password: this.password\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async submit() {\r\n      const valid = await this.$refs.observer.validate()\r\n      if (valid) {\r\n        this.login(this.params) // action to login\r\n      }\r\n    },\r\n    clear() {\r\n      // you can use this method to clear login form\r\n      this.email = ''\r\n      this.password = null\r\n      this.$refs.observer.reset()\r\n    }\r\n  }\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}