{"ast":null,"code":"import _slicedToArray from \"D:/vuejs-learning/MVEN-StackProject/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getTimestampIdentifier } from '../util/timestamp';\nvar MILLIS_IN_DAY = 86400000;\n\nfunction _getVisuals(events) {\n  var minStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var visuals = events.map(function (event) {\n    return {\n      event: event,\n      columnCount: 0,\n      column: 0,\n      left: 0,\n      width: 100\n    };\n  });\n  visuals.sort(function (a, b) {\n    return Math.max(minStart, a.event.startTimestampIdentifier) - Math.max(minStart, b.event.startTimestampIdentifier) || b.event.endTimestampIdentifier - a.event.endTimestampIdentifier;\n  });\n  return visuals;\n}\n\nexport { _getVisuals as getVisuals };\nexport function hasOverlap(s0, e0, s1, e1) {\n  var exclude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return exclude ? !(s0 >= e1 || e0 <= s1) : !(s0 > e1 || e0 < s1);\n}\nexport function setColumnCount(groups) {\n  groups.forEach(function (group) {\n    group.visuals.forEach(function (groupVisual) {\n      groupVisual.columnCount = groups.length;\n    });\n  });\n}\nexport function getRange(event) {\n  return [event.startTimestampIdentifier, event.endTimestampIdentifier];\n}\nexport function getDayRange(event) {\n  return [event.startIdentifier, event.endIdentifier];\n}\nexport function getNormalizedRange(event, dayStart) {\n  return [Math.max(dayStart, event.startTimestampIdentifier), Math.min(dayStart + MILLIS_IN_DAY, event.endTimestampIdentifier)];\n}\nexport function getOpenGroup(groups, start, end, timed) {\n  for (var i = 0; i < groups.length; i++) {\n    var group = groups[i];\n    var intersected = false;\n\n    if (hasOverlap(start, end, group.start, group.end, timed)) {\n      for (var k = 0; k < group.visuals.length; k++) {\n        var groupVisual = group.visuals[k];\n\n        var _ref = timed ? getRange(groupVisual.event) : getDayRange(groupVisual.event),\n            _ref2 = _slicedToArray(_ref, 2),\n            groupStart = _ref2[0],\n            groupEnd = _ref2[1];\n\n        if (hasOverlap(start, end, groupStart, groupEnd, timed)) {\n          intersected = true;\n          break;\n        }\n      }\n    }\n\n    if (!intersected) {\n      return i;\n    }\n  }\n\n  return -1;\n}\nexport function getOverlapGroupHandler(firstWeekday) {\n  var handler = {\n    groups: [],\n    min: -1,\n    max: -1,\n    reset: function reset() {\n      handler.groups = [];\n      handler.min = handler.max = -1;\n    },\n    getVisuals: function getVisuals(day, dayEvents, timed) {\n      var reset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (day.weekday === firstWeekday || reset) {\n        handler.reset();\n      }\n\n      var dayStart = getTimestampIdentifier(day);\n\n      var visuals = _getVisuals(dayEvents, dayStart);\n\n      visuals.forEach(function (visual) {\n        var _ref3 = timed ? getRange(visual.event) : getDayRange(visual.event),\n            _ref4 = _slicedToArray(_ref3, 2),\n            start = _ref4[0],\n            end = _ref4[1];\n\n        if (handler.groups.length > 0 && !hasOverlap(start, end, handler.min, handler.max, timed)) {\n          setColumnCount(handler.groups);\n          handler.reset();\n        }\n\n        var targetGroup = getOpenGroup(handler.groups, start, end, timed);\n\n        if (targetGroup === -1) {\n          targetGroup = handler.groups.length;\n          handler.groups.push({\n            start: start,\n            end: end,\n            visuals: []\n          });\n        }\n\n        var target = handler.groups[targetGroup];\n        target.visuals.push(visual);\n        target.start = Math.min(target.start, start);\n        target.end = Math.max(target.end, end);\n        visual.column = targetGroup;\n\n        if (handler.min === -1) {\n          handler.min = start;\n          handler.max = end;\n        } else {\n          handler.min = Math.min(handler.min, start);\n          handler.max = Math.max(handler.max, end);\n        }\n      });\n      setColumnCount(handler.groups);\n\n      if (timed) {\n        handler.reset();\n      }\n\n      return visuals;\n    }\n  };\n  return handler;\n}","map":{"version":3,"mappings":"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","names":["getTimestampIdentifier","MILLIS_IN_DAY","getVisuals","events","minStart","visuals","map","event","columnCount","column","left","width","sort","a","b","Math","max","startTimestampIdentifier","endTimestampIdentifier","hasOverlap","s0","e0","s1","e1","exclude","setColumnCount","groups","forEach","group","groupVisual","length","getRange","getDayRange","startIdentifier","endIdentifier","getNormalizedRange","dayStart","min","getOpenGroup","start","end","timed","i","intersected","k","groupStart","groupEnd","getOverlapGroupHandler","firstWeekday","handler","reset","day","dayEvents","weekday","visual","targetGroup","push","target"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/modes/common.ts"],"sourcesContent":["import { CalendarEventParsed, CalendarEventVisual, CalendarTimestamp } from 'vuetify/types'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\nconst MILLIS_IN_DAY = 86400000\n\nexport type GetRange = (event: CalendarEventParsed) => [number, number]\n\nexport function getVisuals (events: CalendarEventParsed[], minStart = 0): CalendarEventVisual[] {\n  const visuals = events.map(event => ({\n    event,\n    columnCount: 0,\n    column: 0,\n    left: 0,\n    width: 100,\n  }))\n\n  visuals.sort((a, b) => {\n    return (Math.max(minStart, a.event.startTimestampIdentifier) - Math.max(minStart, b.event.startTimestampIdentifier)) ||\n           (b.event.endTimestampIdentifier - a.event.endTimestampIdentifier)\n  })\n\n  return visuals\n}\n\nexport interface ColumnGroup {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\nexport function hasOverlap (s0: number, e0: number, s1: number, e1: number, exclude = true): boolean {\n  return exclude ? !(s0 >= e1 || e0 <= s1) : !(s0 > e1 || e0 < s1)\n}\n\nexport function setColumnCount (groups: ColumnGroup[]) {\n  groups.forEach(group => {\n    group.visuals.forEach(groupVisual => {\n      groupVisual.columnCount = groups.length\n    })\n  })\n}\n\nexport function getRange (event: CalendarEventParsed): [number, number] {\n  return [event.startTimestampIdentifier, event.endTimestampIdentifier]\n}\n\nexport function getDayRange (event: CalendarEventParsed): [number, number] {\n  return [event.startIdentifier, event.endIdentifier]\n}\n\nexport function getNormalizedRange (event: CalendarEventParsed, dayStart: number): [number, number] {\n  return [Math.max(dayStart, event.startTimestampIdentifier), Math.min(dayStart + MILLIS_IN_DAY, event.endTimestampIdentifier)]\n}\n\nexport function getOpenGroup (groups: ColumnGroup[], start: number, end: number, timed: boolean) {\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i]\n    let intersected = false\n\n    if (hasOverlap(start, end, group.start, group.end, timed)) {\n      for (let k = 0; k < group.visuals.length; k++) {\n        const groupVisual = group.visuals[k]\n        const [groupStart, groupEnd] = timed ? getRange(groupVisual.event) : getDayRange(groupVisual.event)\n\n        if (hasOverlap(start, end, groupStart, groupEnd, timed)) {\n          intersected = true\n          break\n        }\n      }\n    }\n\n    if (!intersected) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function getOverlapGroupHandler (firstWeekday: number) {\n  const handler = {\n    groups: [] as ColumnGroup[],\n    min: -1,\n    max: -1,\n    reset: () => {\n      handler.groups = []\n      handler.min = handler.max = -1\n    },\n    getVisuals: (day: CalendarTimestamp, dayEvents: CalendarEventParsed[], timed: boolean, reset = false) => {\n      if (day.weekday === firstWeekday || reset) {\n        handler.reset()\n      }\n\n      const dayStart = getTimestampIdentifier(day)\n      const visuals = getVisuals(dayEvents, dayStart)\n\n      visuals.forEach(visual => {\n        const [start, end] = timed ? getRange(visual.event) : getDayRange(visual.event)\n\n        if (handler.groups.length > 0 && !hasOverlap(start, end, handler.min, handler.max, timed)) {\n          setColumnCount(handler.groups)\n          handler.reset()\n        }\n\n        let targetGroup = getOpenGroup(handler.groups, start, end, timed)\n\n        if (targetGroup === -1) {\n          targetGroup = handler.groups.length\n\n          handler.groups.push({ start, end, visuals: [] })\n        }\n\n        const target = handler.groups[targetGroup]\n        target.visuals.push(visual)\n        target.start = Math.min(target.start, start)\n        target.end = Math.max(target.end, end)\n\n        visual.column = targetGroup\n\n        if (handler.min === -1) {\n          handler.min = start\n          handler.max = end\n        } else {\n          handler.min = Math.min(handler.min, start)\n          handler.max = Math.max(handler.max, end)\n        }\n      })\n\n      setColumnCount(handler.groups)\n\n      if (timed) {\n        handler.reset()\n      }\n\n      return visuals\n    },\n  }\n\n  return handler\n}\n"]},"metadata":{},"sourceType":"module"}