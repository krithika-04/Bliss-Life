{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getOverlapGroupHandler } from './common';\nvar FULL_WIDTH = 100;\nexport var column = function column(events, firstWeekday, overlapThreshold) {\n  var handler = getOverlapGroupHandler(firstWeekday);\n  return function (day, dayEvents, timed, reset) {\n    var visuals = handler.getVisuals(day, dayEvents, timed, reset);\n\n    if (timed) {\n      visuals.forEach(function (visual) {\n        visual.left = visual.column * FULL_WIDTH / visual.columnCount;\n        visual.width = FULL_WIDTH / visual.columnCount;\n      });\n    }\n\n    return visuals;\n  };\n};","map":{"version":3,"mappings":";;AACA,SAASA,sBAAT,QAAuC,UAAvC;AAEA,IAAMC,UAAU,GAAG,GAAnB;AAEA,OAAO,IAAMC,MAAM,GAA6B,SAAnCA,MAAmC,CAACC,MAAD,EAASC,YAAT,EAAuBC,gBAAvB,EAA2C;AACzF,MAAMC,OAAO,GAAGN,sBAAsB,CAACI,YAAD,CAAtC;AAEA,SAAO,UAACG,GAAD,EAAMC,SAAN,EAAiBC,KAAjB,EAAwBC,KAAxB,EAAiC;AACtC,QAAMC,OAAO,GAAGL,OAAO,CAACM,UAAR,CAAmBL,GAAnB,EAAwBC,SAAxB,EAAmCC,KAAnC,EAA0CC,KAA1C,CAAhB;;AAEA,QAAID,KAAJ,EAAW;AACTE,aAAO,CAACE,OAAR,CAAgB,gBAAM,EAAG;AACvBC,cAAM,CAACC,IAAP,GAAcD,MAAM,CAACZ,MAAP,GAAgBD,UAAhB,GAA6Ba,MAAM,CAACE,WAAlD;AACAF,cAAM,CAACG,KAAP,GAAehB,UAAU,GAAGa,MAAM,CAACE,WAAnC;AAFF;AAID;;AAED,WAAOL,OAAP;AAVF;AAHK","names":["getOverlapGroupHandler","FULL_WIDTH","column","events","firstWeekday","overlapThreshold","handler","day","dayEvents","timed","reset","visuals","getVisuals","forEach","visual","left","columnCount","width"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/modes/column.ts"],"sourcesContent":["import { CalendarEventOverlapMode } from 'vuetify/types'\nimport { getOverlapGroupHandler } from './common'\n\nconst FULL_WIDTH = 100\n\nexport const column: CalendarEventOverlapMode = (events, firstWeekday, overlapThreshold) => {\n  const handler = getOverlapGroupHandler(firstWeekday)\n\n  return (day, dayEvents, timed, reset) => {\n    const visuals = handler.getVisuals(day, dayEvents, timed, reset)\n\n    if (timed) {\n      visuals.forEach(visual => {\n        visual.left = visual.column * FULL_WIDTH / visual.columnCount\n        visual.width = FULL_WIDTH / visual.columnCount\n      })\n    }\n\n    return visuals\n  }\n}\n"]},"metadata":{},"sourceType":"module"}